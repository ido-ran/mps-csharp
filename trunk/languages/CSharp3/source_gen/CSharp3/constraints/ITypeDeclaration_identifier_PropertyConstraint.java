package CSharp3.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodePropertyGetter;
import jetbrains.mps.smodel.constraints.INodePropertySetter;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ITypeDeclaration_identifier_PropertyConstraint implements IModelConstraints, INodePropertyGetter, INodePropertySetter {

  public ITypeDeclaration_identifier_PropertyConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodePropertyGetter("CSharp3.structure.ITypeDeclaration", "identifier", this);
    manager.registerNodePropertySetter("CSharp3.structure.ITypeDeclaration", "identifier", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodePropertyGetter("CSharp3.structure.ITypeDeclaration", "identifier");
    manager.unRegisterNodePropertySetter("CSharp3.structure.ITypeDeclaration", "identifier");
  }

  public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
    return SPropertyOperations.getString(node, "name");
  }

  public void execPropertySet(final SNode node, final String propertyName, final String propertyValue, final IScope scope) {
    SPropertyOperations.set(node, "name", (SPropertyOperations.getString(propertyValue)));
  }

}
