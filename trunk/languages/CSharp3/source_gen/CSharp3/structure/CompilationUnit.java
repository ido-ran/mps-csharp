package CSharp3.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CompilationUnit extends BaseConcept implements INamedConcept, INamespaceContainer {
  public static final String concept = "CSharp3.structure.CompilationUnit";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String NAMESPACE = "namespace";
  public static final String GLOBAL_ATTRIBUTES = "globalAttributes";
  public static final String EXTERN_ALIAS_DIRECTIVES = "externAliasDirectives";
  public static final String USING_DIRECTIVES = "usingDirectives";
  public static final String NAMESPACE_DECLARATIONS = "namespaceDeclarations";
  public static final String TYPE_DECLARATIONS = "typeDeclarations";

  public CompilationUnit(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(CompilationUnit.NAME);
  }

  public void setName(String value) {
    this.setProperty(CompilationUnit.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(CompilationUnit.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(CompilationUnit.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(CompilationUnit.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(CompilationUnit.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(CompilationUnit.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(CompilationUnit.VIRTUAL_PACKAGE, value);
  }

  public NamespaceNode getNamespace() {
    return (NamespaceNode)this.getChild(NamespaceNode.class, CompilationUnit.NAMESPACE);
  }

  public void setNamespace(NamespaceNode node) {
    super.setChild(CompilationUnit.NAMESPACE, node);
  }

  public int getGlobalAttributesesCount() {
    return this.getChildCount(CompilationUnit.GLOBAL_ATTRIBUTES);
  }

  public Iterator<GlobalAttribute> globalAttributeses() {
    return this.children(GlobalAttribute.class, CompilationUnit.GLOBAL_ATTRIBUTES);
  }

  public List<GlobalAttribute> getGlobalAttributeses() {
    return this.getChildren(GlobalAttribute.class, CompilationUnit.GLOBAL_ATTRIBUTES);
  }

  public void addGlobalAttributes(GlobalAttribute node) {
    this.addChild(CompilationUnit.GLOBAL_ATTRIBUTES, node);
  }

  public void insertGlobalAttributes(GlobalAttribute prev, GlobalAttribute node) {
    this.insertChild(prev, CompilationUnit.GLOBAL_ATTRIBUTES, node);
  }

  public int getExternAliasDirectivesesCount() {
    return this.getChildCount(CompilationUnit.EXTERN_ALIAS_DIRECTIVES);
  }

  public Iterator<ExternAliasDirective> externAliasDirectiveses() {
    return this.children(ExternAliasDirective.class, CompilationUnit.EXTERN_ALIAS_DIRECTIVES);
  }

  public List<ExternAliasDirective> getExternAliasDirectiveses() {
    return this.getChildren(ExternAliasDirective.class, CompilationUnit.EXTERN_ALIAS_DIRECTIVES);
  }

  public void addExternAliasDirectives(ExternAliasDirective node) {
    this.addChild(CompilationUnit.EXTERN_ALIAS_DIRECTIVES, node);
  }

  public void insertExternAliasDirectives(ExternAliasDirective prev, ExternAliasDirective node) {
    this.insertChild(prev, CompilationUnit.EXTERN_ALIAS_DIRECTIVES, node);
  }

  public int getUsingDirectivesesCount() {
    return this.getChildCount(CompilationUnit.USING_DIRECTIVES);
  }

  public Iterator<UsingDirective> usingDirectiveses() {
    return this.children(UsingDirective.class, CompilationUnit.USING_DIRECTIVES);
  }

  public List<UsingDirective> getUsingDirectiveses() {
    return this.getChildren(UsingDirective.class, CompilationUnit.USING_DIRECTIVES);
  }

  public void addUsingDirectives(UsingDirective node) {
    this.addChild(CompilationUnit.USING_DIRECTIVES, node);
  }

  public void insertUsingDirectives(UsingDirective prev, UsingDirective node) {
    this.insertChild(prev, CompilationUnit.USING_DIRECTIVES, node);
  }

  public int getNamespaceDeclarationsesCount() {
    return this.getChildCount(CompilationUnit.NAMESPACE_DECLARATIONS);
  }

  public Iterator<NamespaceDeclaration> namespaceDeclarationses() {
    return this.children(NamespaceDeclaration.class, CompilationUnit.NAMESPACE_DECLARATIONS);
  }

  public List<NamespaceDeclaration> getNamespaceDeclarationses() {
    return this.getChildren(NamespaceDeclaration.class, CompilationUnit.NAMESPACE_DECLARATIONS);
  }

  public void addNamespaceDeclarations(NamespaceDeclaration node) {
    this.addChild(CompilationUnit.NAMESPACE_DECLARATIONS, node);
  }

  public void insertNamespaceDeclarations(NamespaceDeclaration prev, NamespaceDeclaration node) {
    this.insertChild(prev, CompilationUnit.NAMESPACE_DECLARATIONS, node);
  }

  public int getTypeDeclarationsesCount() {
    return this.getChildCount(CompilationUnit.TYPE_DECLARATIONS);
  }

  public Iterator<ITypeDeclaration> typeDeclarationses() {
    return this.children(ITypeDeclaration.class, CompilationUnit.TYPE_DECLARATIONS);
  }

  public List<ITypeDeclaration> getTypeDeclarationses() {
    return this.getChildren(ITypeDeclaration.class, CompilationUnit.TYPE_DECLARATIONS);
  }

  public void addTypeDeclarations(ITypeDeclaration node) {
    this.addChild(CompilationUnit.TYPE_DECLARATIONS, node);
  }

  public void insertTypeDeclarations(ITypeDeclaration prev, ITypeDeclaration node) {
    this.insertChild(prev, CompilationUnit.TYPE_DECLARATIONS, node);
  }


  public static CompilationUnit newInstance(SModel sm, boolean init) {
    return (CompilationUnit)SModelUtil_new.instantiateConceptDeclaration("CSharp3.structure.CompilationUnit", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CompilationUnit newInstance(SModel sm) {
    return CompilationUnit.newInstance(sm, false);
  }

}
