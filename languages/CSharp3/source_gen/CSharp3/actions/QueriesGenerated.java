package CSharp3.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.SideTransformPreconditionContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;

public class QueriesGenerated {

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_NamespaceNode_4331618290746359771(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getSourceNode()), "CSharp3.structure.UsingDirective")) {
      SNode parent = SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()), "CSharp3.structure.UsingDirective");
      return SLinkOperations.getTarget(parent, "namespace", false) != null && SPropertyOperations.getString(parent, "namespaceAlias") == null;
    }
    return false;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_EnumDeclaration_5825802137697489188(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getSourceNode(), "storageType", true), "CSharp3.structure.Int32Type");
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_InterfaceDeclaration_664760238039489545(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getSourceNode(), "interfaceBases", true)).isEmpty();
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_NamespaceNode_4331618290746359769(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("CSharp3.structure.UsingDirective");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {

        public SNode doSubstitute(String pattern) {
          SNode parent = SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()), "CSharp3.structure.UsingDirective");
          SPropertyOperations.set(parent, "namespaceAlias", SPropertyOperations.getString(SLinkOperations.getTarget(parent, "namespace", false), "name"));
          SPropertyOperations.set(SLinkOperations.getTarget(parent, "namespace", false), "name", null);
          return parent;
        }

        public String getMatchingText(String pattern) {
          return "=";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }

        public String getDescriptionText(String pattern) {
          return "namespace alias assignment";
        }
      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_EnumDeclaration_5825802137697489173(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {

        public SNode doSubstitute(String pattern) {
          SLinkOperations.setTarget(_context.getSourceNode(), "storageType", null, true);
          return _context.getSourceNode();
        }

        public String getMatchingText(String pattern) {
          return ":";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }
      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_InterfaceDeclaration_664760238039489544(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("CSharp3.structure.InterfaceDeclaration");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {

        public SNode doSubstitute(String pattern) {
          SLinkOperations.addNewChild(_context.getSourceNode(), "interfaceBases", "CSharp3.structure.InterfaceReference");
          return _context.getSourceNode();
        }

        public String getMatchingText(String pattern) {
          return ":";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }
      });
    }
    return result;
  }

}
