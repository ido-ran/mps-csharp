package CSharp3.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_ITypeDeclaration_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {

  public typeof_ITypeDeclaration_InferenceRule() {
  }

  public void applyRule(final SNode declaration, final TypeCheckingContext typeCheckingContext) {
    if (SPropertyOperations.getBoolean(declaration, "isNestedType") == false) {
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(declaration, "visibility", true), "CSharp3.structure.NestedTypeVisibility")) {
        {
          BaseIntentionProvider intentionProvider = null;
          IErrorTarget errorTarget = new NodeErrorTarget();
          typeCheckingContext.reportTypeError(SLinkOperations.getTarget(declaration, "visibility", true), "Nested visibility not valid on non-nested type.", "r:c2f715ac-e272-4cc0-bd75-15a380aea344(CSharp3.typesystem)", "5734555027415111459", intentionProvider, errorTarget);
        }
      }
      if (SPropertyOperations.getBoolean(declaration, "hidesInheritedMember")) {
        {
          BaseIntentionProvider intentionProvider = null;
          IErrorTarget errorTarget = new NodeErrorTarget();
          typeCheckingContext.reportTypeError(declaration, "Non-nested types cannot hide inherited members.", "r:c2f715ac-e272-4cc0-bd75-15a380aea344(CSharp3.typesystem)", "5734555027415111480", intentionProvider, errorTarget);
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "CSharp3.structure.ITypeDeclaration";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
