package CSharp3.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class EnumDeclaration extends BaseConcept implements ITypeDeclaration, IAttributed {
  public static final String concept = "CSharp3.structure.EnumDeclaration";
  public static final String IDENTIFIER = "identifier";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String IS_NESTED_TYPE = "isNestedType";
  public static final String HIDES_INHERITED_MEMBER = "hidesInheritedMember";
  public static final String STORAGE_TYPE = "storageType";
  public static final String VISIBILITY = "visibility";
  public static final String MEMBERS = "members";
  public static final String ATTRIBUTES = "attributes";

  public EnumDeclaration(SNode node) {
    super(node);
  }

  public String getIdentifier() {
    return this.getProperty(EnumDeclaration.IDENTIFIER);
  }

  public void setIdentifier(String value) {
    this.setProperty(EnumDeclaration.IDENTIFIER, value);
  }

  public String getName() {
    return this.getProperty(EnumDeclaration.NAME);
  }

  public void setName(String value) {
    this.setProperty(EnumDeclaration.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(EnumDeclaration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(EnumDeclaration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(EnumDeclaration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(EnumDeclaration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(EnumDeclaration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(EnumDeclaration.VIRTUAL_PACKAGE, value);
  }

  public boolean getIsNestedType() {
    return this.getBooleanProperty(EnumDeclaration.IS_NESTED_TYPE);
  }

  public void setIsNestedType(boolean value) {
    this.setBooleanProperty(EnumDeclaration.IS_NESTED_TYPE, value);
  }

  public boolean getHidesInheritedMember() {
    return this.getBooleanProperty(EnumDeclaration.HIDES_INHERITED_MEMBER);
  }

  public void setHidesInheritedMember(boolean value) {
    this.setBooleanProperty(EnumDeclaration.HIDES_INHERITED_MEMBER, value);
  }

  public IntegralType getStorageType() {
    return (IntegralType)this.getChild(IntegralType.class, EnumDeclaration.STORAGE_TYPE);
  }

  public void setStorageType(IntegralType node) {
    super.setChild(EnumDeclaration.STORAGE_TYPE, node);
  }

  public TypeVisibility getVisibility() {
    return (TypeVisibility)this.getChild(TypeVisibility.class, EnumDeclaration.VISIBILITY);
  }

  public void setVisibility(TypeVisibility node) {
    super.setChild(EnumDeclaration.VISIBILITY, node);
  }

  public int getMembersesCount() {
    return this.getChildCount(EnumDeclaration.MEMBERS);
  }

  public Iterator<EnumMemberDeclaration> memberses() {
    return this.children(EnumMemberDeclaration.class, EnumDeclaration.MEMBERS);
  }

  public List<EnumMemberDeclaration> getMemberses() {
    return this.getChildren(EnumMemberDeclaration.class, EnumDeclaration.MEMBERS);
  }

  public void addMembers(EnumMemberDeclaration node) {
    this.addChild(EnumDeclaration.MEMBERS, node);
  }

  public void insertMembers(EnumMemberDeclaration prev, EnumMemberDeclaration node) {
    this.insertChild(prev, EnumDeclaration.MEMBERS, node);
  }

  public int getAttributesesCount() {
    return this.getChildCount(EnumDeclaration.ATTRIBUTES);
  }

  public Iterator<Attribute> attributeses() {
    return this.children(Attribute.class, EnumDeclaration.ATTRIBUTES);
  }

  public List<Attribute> getAttributeses() {
    return this.getChildren(Attribute.class, EnumDeclaration.ATTRIBUTES);
  }

  public void addAttributes(Attribute node) {
    this.addChild(EnumDeclaration.ATTRIBUTES, node);
  }

  public void insertAttributes(Attribute prev, Attribute node) {
    this.insertChild(prev, EnumDeclaration.ATTRIBUTES, node);
  }


  public static EnumDeclaration newInstance(SModel sm, boolean init) {
    return (EnumDeclaration)SModelUtil_new.instantiateConceptDeclaration("CSharp3.structure.EnumDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static EnumDeclaration newInstance(SModel sm) {
    return EnumDeclaration.newInstance(sm, false);
  }

}
